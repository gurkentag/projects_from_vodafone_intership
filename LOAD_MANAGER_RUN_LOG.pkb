CREATE OR REPLACE PACKAGE BODY IDBA.LOAD_MANAGER_RUN_LOG
AS

/* START GLOBAL PRIVATE CONSTANTS */
	TESTING    	constant boolean default true;
	nl					constant varchar2(1) default chr(10);
	/* END GLOBAL PRIVATE CONSTANTS */

	/* START FORWARD DECLARATIONS ONLY FOR PRIVATE*/
	PROCEDURE pprint(vString varchar2);
	PROCEDURE cprint(vString varchar2);
	PROCEDURE create_table;
	FUNCTION  getUser RETURN varchar2;
	PROCEDURE get_load_task(loadId number);
	FUNCTION get_last_id (loadId number) RETURN number;
	PROCEDURE inser_start(loadid number);
	PROCEDURE insert_end (loadId number);
	/* END FORWARD DECLARATIONS ONLY FOR PRIVATE*/
	
	/* START GLOBAL PRIVATE VARIABLES */
	strExecUsr 	varchar2(30) := getUser();
	strLoadTask	varchar2(100);
	/* END GLOBAL PRIVATE VARIABLES */
	
	PROCEDURE pprint(vString varchar2)
	AS
	BEGIN
		dbms_output.put_line(vString);
	END;
	
	
	PROCEDURE cprint(vString varchar2)
	AS
	BEGIN
		if TESTING = true then
			dbms_output.put_line(nl);
			dbms_output.put_line('---------------------- CODE BLOCK START ----------------------');
			dbms_output.put_line(vString);
			dbms_output.put_line('----------------------- CODE BLOCK END -----------------------');
			dbms_output.put_line(nl);
		end if;
	END;
	
	PROCEDURE create_table 
	AS
	
		stmtCreate      varchar2(3200);
		tableCount      number;
		db_user         varchar2(30);
	
	BEGIN
		for i in (
			select table_name from user_tables where table_name = 'T8_LOAD_STATS'
			)loop
			begin
				execute immediate 'DROP TABLE '||strExecUsr||'. T8_LOAD_STATS';
			exception
				when others then null;
			end;
		end loop;
  
		stmtCreate:='
			CREATE TABLE '||strExecUsr||'.T8_LOAD_STATS(
				ID 				       				NUMBER GENERATED BY DEFAULT AS IDENTITY, 
				LOAD_ID 	       				NUMBER,
				SCHEMA             			VARCHAR2 (30),
				PROCEDURE_NAME     			VARCHAR2 (50),
				DML_METHOD         			VARCHAR2 (50),
				TARGET_TABLE      			VARCHAR2 (50),
				LOAD_VIEW 				 			VARCHAR2 (50),
				START_CURRENT_RUN   		TIMESTAMP,
				END_CURRENT_RUN 				TIMESTAMP,
				DURATION_CURRENT_RUN 		INTERVAL DAY(9) TO SECOND(6),
				START_COUNT_CURRENT_RUN NUMBER,
				END_COUNT_CURRENT_RUN	  NUMBER,
				START_LAST_RUN 					TIMESTAMP,
				END_LAST_RUN 						TIMESTAMP,
				DURATION_LAST_RUN 			INTERVAL DAY(9) TO SECOND(6),
				AVR_RUN_DURATION 				INTERVAL DAY(9) TO SECOND(6),
				START_COUNT_LAST_RUN	  NUMBER,
				END_COUNT_LAST_RUN  		NUMBER,
				PRIMARY KEY 						(ID)
			)';
		cprint(stmtCreate);
		execute immediate stmtCreate;
		
	END create_table;
	
	PROCEDURE insert_row (loadId number)
	AS
		tableCount		number;
		stmt          varchar2(3200);
		stmS          varchar2(3200);
		stmtSelect 		varchar2(3200);
		
	BEGIN 
		stmt:= q'[alter session set nls_date_format= 'DD.MM.YYYY HH24:MI']';
		execute immediate stmt;

		stmS :=  q'[
			SELECT COUNT(1) FROM USER_TABLES
			WHERE TABLE_NAME = 'T8_LOAD_STATS'
			]';
		
		pprint(stmS);
		execute immediate stmS into tableCount; 
		pprint(tableCount);
		if tableCount = 0 then
			create_table;
		end if;
		get_load_task(loadId);
		case 
			when lower (strLoadTask)  = 'start loading process' then
				pprint('start aufruf');
				inser_start(loadId);
			when lower (strLoadTask) = 'finished loading process' then
				pprint('end aufruf');
				insert_end(loadId);
			else 
			pprint(strLoadTask);	
		end case;
	END insert_row;
	
	
	
	PROCEDURE get_load_task(loadId number)
	AS
		stmtSelect  varchar2(3200);
	BEGIN
		stmtSelect:=q'[
			SELECT LOAD_TASK
			FROM ]'||strExecUsr||q'[.T8_LOAD_MANAGER_LOG
			WHERE 1=1
				AND LOAD_ID = ]'||loadId||q'[
				AND LOAD_TASK IN ('START LOADING PROCESS', 'FINISHED LOADING PROCESS')
		]';
		cprint(stmtSelect);
		execute immediate stmtSelect into strLoadTask; 
		
		exception 
			when others then 
				strLoadTask:='ERROR: LOADING IST SCHON DURCHGELAUFEN FÜR LOAD_ID = '||loadID;
	END get_load_task; 

	
  PROCEDURE inser_start(loadid number)
  AS
    CallProc          varchar2(80);
    TargetTbl         varchar2(80);
    DmlMethod         varchar2(80);
    LoadView          varchar2(80);
    LoadTS            timestamp;

    TargetTblRowCnt   number;
    LastRunID         number;
    LastStartRun     	timestamp;
    LastEndRun        timestamp;
    LastDuration 			INTERVAL DAY(9) TO SECOND(6);
    LastStartCount		number;
    LastEndCount 			number;
    
    stmtBaseData      varchar2(1000);
    stmtRowCount      varchar2(1000);
    stmtLastRun       varchar2(1000);
    stmtLastValues    varchar2(3200);
    stmtInsert        varchar2(3200);
  BEGIN
	--select base dates from Manager_Log table using current Load_id
		stmtBaseData := q'[ 
			SELECT CALLING_PROCEDURE, TARGET_TABLE, LOAD_TYPE, LOAD_VIEW, LOAD_TIMESTAMP
			FROM ]'||strExecUsr||q'[.T8_LOAD_MANAGER_LOG
			WHERE 1=1
        AND LOAD_ID = :LOAD_ID
        AND LOAD_TASK = 'START LOADING PROCESS'
        ]';
		execute immediate stmtBaseData into CallProc, TargetTbl, DmlMethod, LoadView, LoadTS using loadid;
	-- count Rows in the target_table	
		stmtRowCount := 'SELECT COUNT(1) FROM '||strExecUsr||'.'||TargetTbl;
		execute immediate stmtRowCount into TargetTblRowCnt;
	
    -- get load id of last run for same combination
    stmtLastRun := q'[
      SELECT MAX(ID) FROM ]'||strExecUsr||q'[.T8_LOAD_STATS
      WHERE 1=1
        AND PROCEDURE_NAME = :CURRENT_CALLING_PROCEDURE
        AND TARGET_TABLE = :CURRENT_TARGET_TABLE
        AND LOAD_VIEW = :CURRENT_LOAD_VIEW
      ]';
    pprint(stmtLastRun);
    execute immediate stmtLastRun into LastRunID using CallProc, TargetTbl, LoadView;
    	
    -- do insert into Load_Stats table with new and lasts dates or only with new
    	stmtInsert:=q'[
				INSERT INTO ]'||strExecUsr||q'[.T8_LOAD_STATS (
					LOAD_ID,
					SCHEMA,
					PROCEDURE_NAME,
					DML_METHOD,
					TARGET_TABLE,
					LOAD_VIEW,
					START_CURRENT_RUN,
					START_COUNT_CURRENT_RUN,
					START_LAST_RUN,
					END_LAST_RUN,
					DURATION_LAST_RUN,
					START_COUNT_LAST_RUN,
					END_COUNT_LAST_RUN
					)			
				VALUES(
					:LOAD_ID,
					:CURRENT_USER, 
					:CURRENT_CALLING_PROCEDURE,
					:DML_METHOD,
					:CURRENT_TARGET_TABLE,
					:CURRENT_LOAD_VIEW,
					:LOAD_TIMESTAMP,
					]'||TargetTblRowCnt||q'[,
					:LAST_START_RUN,
					:LAST_END_RUN,
					:LAST_DURATION,
					:LAST_START_COUNT,
					:LAST_END_COUNT
				)
			]';
    --get last values for this last load_id 
    stmtLastValues := q'[ 
			SELECT START_CURRENT_RUN,
				END_CURRENT_RUN,
				DURATION_CURRENT_RUN,
				START_COUNT_CURRENT_RUN,
				END_COUNT_CURRENT_RUN 
			FROM ]'||strExecUsr||q'[.T8_LOAD_STATS
      WHERE LOAD_ID = :LOAD_ID
			]';
		pprint(stmtLastValues);
		execute immediate stmtLastValues into LastStartRun, LastEndRun, LastDuration, LastStartCount, LastEndCount using LastRunID;
		--insert with lasts and new values 
		pprint(stmtInsert);
		execute immediate stmtInsert using loadid,strExecUsr, CallProc, DmlMethod, TargetTbl, LoadView, LoadTS, LastStartRun, LastEndRun, LastDuration, LastStartCount, LastEndCount;
	--catch exeption 'data no for found' when no last values exist and do insert 
	EXCEPTION 
		when no_data_found then
			pprint(stmtInsert);
			execute immediate stmtInsert using loadid,strExecUsr, CallProc, DmlMethod, TargetTbl, LoadView, LoadTS, LastStartRun, LastEndRun, LastDuration, LastStartCount, LastEndCount;
		
  END inser_start;

	
  /*
	PROCEDURE insert_start (loadId number)
	AS
		userName      	varchar2(30);
		tableCount    	number;
		countRows  			number := 0;
		stmtSelectTime 	varchar2(3200);
		stmtSelect 			varchar2 (3200);
		stmtCount  			varchar2 (3200);
		stmtInsert 			varchar2 (3200);
		lastId        	number;
		tableName  			varchar2(50);
		procdureName		varchar2(50);
		dmlMethod				varchar2(50);
		loadView				varchar2(50);
		loadTime      	timestamp;
	BEGIN
		stmtSelect:= ' 
			SELECT EXEC_USER, PROCEDURE_NAME, DML_METHOD, TARGET_TABLE, LOAD_VIEW 
			FROM '||strExecUsr||'.T8_LOAD_MANAGER_LOG
			WHERE 1=1
        AND LOAD_ID = '||loadId||'
			GROUP BY EXEC_USER, TARGET_TABLE';
		execute immediate stmtSelect into userName,procdureName,dmlMethod,tableName,loadView;
		
		stmtCount:=q'[
			SELECT COUNT(1) 
			FROM ]'||userName||'.'||tableName;
		execute immediate stmtCount into tableCount;
		
		stmtSelect := q'[
			SELECT COUNT(1) 
			FROM ]'||strExecUsr||q'[.T8_LOAD_STATS
			WHERE 1=1
				AND PROCEDURE_NAME = ']'||procdureName||q'['
				AND DML_METHOD = ']'||dmlMethod||q'['
				AND TARGET_TABLE = ']'||tableName||q'['
				AND LOAD_VIEW = ']'||loadView||q'['
			]';
			pprint (countRows);
			execute immediate stmtSelect into countRows; 
		
			stmtInsert:=q'[
				INSERT INTO ]'||strExecUsr||q'[.T8_LOAD_STATS (
					LOAD_ID,
					SCHEMA,
					PROCEDURE_NAME,
					DML_METHOD,
					TARGET_TABLE,
					LOAD_VIEW,
					TASK,
					START_CURRENT_RUN,
					START_COUNT_CURRENT_RUN
					)
				SELECT 
					]'||loadId||q'[,
					']'||strExecUsr||q'[', 
					CALLING_PROCEDURE,
					LOAD_TYPE,
					TARGET_TABLE,
					LOAD_VIEW,
					LOAD_TASK,
					LOAD_TIMESTAMP,
					]'||countRows||q'[
				FROM ]'||strExecUsr||q'[.T8_LOAD_MANAGER_LOG
				WHERE 1=1
					AND LOAD_ID = ]'||loadId||q'[
					AND LOAD_TASK LIKE '%START LOADING PROCESS'
				GROUP BY LOAD_ID,
					EXEC_USER, 
					CALLING_PROCEDURE,
					LOAD_TYPE,
					TARGET_TABLE,
					LOAD_VIEW,
					LOAD_TASK,
					LOAD_TIMESTAMP
				]';
			
		commit;
		
	END insert_start;
	*/
	
	PROCEDURE insert_end (loadId number)
	AS
		stmtMerge       varchar2 (3200);
		stmtSelect      varchar2 (3200);
		stmtSelectTime  varchar2 (3200);
		currentEndRun   timestamp;
		countValue      number:= 0;
		avgDuration     INTERVAL DAY(9) TO SECOND(6);
		loadTime        timestamp;
	BEGIN
		stmtSelect := '
			SELECT END_CURRENT_RUN FROM '||strExecUsr||'.T8_LOAD_STATS
			WHERE LOAD_ID = '||loadId;
		
		cprint(stmtSelect);
		execute immediate stmtSelect into currentEndRun;
		
		stmtSelectTime:= q'[
			SELECT LOAD_TIMESTAMP
			FROM ]'||strExecUsr||q'[.T8_LOAD_MANAGER_LOG
			WHERE 1=1
				AND LOAD_ID = ]'||loadId||q'[
				AND LOAD_TASK LIKE '%FINISHED LOADING PROCESS'
			]';
		cprint(stmtSelectTime);	
		execute immediate stmtSelectTime into loadTime;
		
		pprint(loadTime);
		if currentEndRun is null then
			stmtMerge :=q'[
				MERGE INTO ]'||strExecUsr||q'[.T8_LOAD_STATS DEST
				USING(
					SELECT * FROM ]'||strExecUsr||q'[.T8_LOAD_STATS
				WHERE 1=1
					AND END_CURRENT_RUN IS NULL
					AND LOAD_ID = ]'||loadId||q'[ 
					)SRC
				ON (DEST.ID = SRC.ID)
				WHEN MATCHED THEN UPDATE SET
					DEST.END_CURRENT_RUN = :LOADTIME,
					DEST.DURATION_CURRENT_RUN = (:LOADTIME - SRC.START_CURRENT_RUN),
					DEST.AVR_RUN_DURATION = ']'||avgDuration||q'[',
					DEST.END_COUNT_CURRENT_RUN = ]'||countValue;
			
			cprint(stmtMerge);
			execute immediate stmtMerge USING loadTime, loadTime;
		end if;
--		stmtMerge := q'[
--			MERGE INTO ]'||strExecUsr||q'[.T8_LOAD_STATS DEST
--			USING(
--				SELECT * FROM  ]'||strExecUsr||q'[.T8_LOAD_STATS
--				WHERE LOAD_ID = ]'||loadId||q'[ 
--					)SRC
--				ON (DEST.ID = SRC.ID)
--			WHEN MATCHED THEN UPDATE SET
--				DEST.END_LAST_RUN =  SRC.END_CURRENT_RUN,
--				DEST.DURATION_LAST_RUN	=	SRC.DURATION_CURRENT_RUN,
--				DEST.AVR_RUN_DURATION =']'||avgDuration||q'[',
--				DEST.END_COUNT_LAST_RUN = SRC.END_COUNT_CURRENT_RUN,
--				DEST.END_CURRENT_RUN = ']'||loadTime||q'[',
--				DEST.END_COUNT_CURRENT_RUN = ]'||countValue;
--				
--			exception
--				when no_data_found then
--					pprint('no_data_found ');

	END insert_end;
	
	FUNCTION get_avg_duration(loadId number)
	RETURN INTERVAL DAY TO SECOND
	IS
		stmSelect       varchar2(3200);
		procedure_name  varchar2(100);
		dml_method      varchar2(100);
		t_table         varchar2(100);
		l_view          varchar2(100);
		avgDuration     INTERVAL DAY(9) TO SECOND(6);
		stmSelectAvg    varchar2 (32000);
	BEGIN
		stmSelect:=q'[ 
			SELECT PROCEDURE_NAME, DML_METHOD, TARGET_TABLE, LOAD_VIEW
			FROM ]'||strExecUsr||q'[.T8_LOAD_STATS
			WHERE id = ]'||loadId;
		execute immediate stmSelect into procedure_name, dml_method, t_table, l_view;

		stmSelectAvg:= q'[
			SELECT 
				NUMTODSINTERVAL(AVG(
				EXTRACT(DAY FROM DURATION_CURRENT_RUN) *86400 +
				EXTRACT(HOUR FROM DURATION_CURRENT_RUN) *3600 +
				EXTRACT(MINUTE FROM DURATION_CURRENT_RUN)*60+
				EXTRACT(SECOND FROM DURATION_CURRENT_RUN) 
				) , 'SECOND')
			FROM ]'||strExecUsr||q'[.T8_LOAD_STATS
			WHERE 1=1
				AND PROCEDURE_NAME= ']'||procedure_name||q'['
				AND DML_METHOD= ']'||dml_method||q'['
				AND TARGET_TABLE =']'||t_table||q'['
				AND LOAD_VIEW =']'||l_view||q'['
			GROUP BY DML_METHOD,
						PROCEDURE_NAME,
						TARGET_TABLE,
						LOAD_VIEW
			]';
		
		cprint(stmSelectAvg);
		execute immediate stmSelectAvg into avgDuration;
	RETURN avgDuration;
	END get_avg_duration;
	
	FUNCTION get_last_id (loadId number)
	RETURN number
	IS
		stmtSelect     		varchar2(3200);
		stmtSelectId			varchar2(3200);
		procedureName     varchar2(100);
		tableName         varchar2(100);
		loadView          varchar2(100);
		dmlMethod					varchar2(100);
		lastId         		number;
	BEGIN
		stmtSelect := q'[
			SELECT 
				CALLING_PROCEDURE,
				TARGET_TABLE,	
				LOAD_VIEW,
				DHM_METHOD
			FROM ]'||strExecUsr||q'[.T8_LOAD_STATS
			WHERE LOAD_ID = ]'||loadId; 
		cprint (stmtSelect);
		execute immediate stmtSelect into procedureName, tableName, loadView, dmlMethod;

		stmtSelectId := q'[
			SELECT ID FROM ]'||strExecUsr||q'[.T8_LOAD_STATS
			WHERE LOAD_TIMESTAMP = 
				(SELECT MAX(LOAD_TIMESTAMP)
				FROM ]'||strExecUsr||q'[.T8_LOAD_STATS
				WHERE 1=1
					AND CALLING_PROCEDURE = ']'||procedureName||q'['
					AND TARGET_TABLE = ']'||tableName||q'['
					AND LOAD_VIEW = ']'||loadView||q'['
					AND DML_METHOD = ']'||dmlMethod||q'['
					AND LOAD_TASK IN ('FINISHED LOADING PROCESS'))
		]';
		cprint (stmtSelectId);
		execute immediate stmtSelectId into lastId;
		RETURN lastId;
	END get_last_id;
	
	
	FUNCTION getUser
	RETURN varchar2
	IS
		userName  varchar(30);	
	BEGIN
		select user into userName from dual;
	RETURN userName;
	END getUser;
	
END LOAD_MANAGER_RUN_LOG;
/
